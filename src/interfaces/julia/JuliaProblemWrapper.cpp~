#include <iostream>

#include "MinotaurConfig.h"
#include "JuliaProblemWrapper.h"
#include "JuliaInterface.h"


#ifdef __cplusplus
extern "C"{
#endif

Minotaur::EnvPtr createEnv()
{
	(Minotaur::EnvPtr) env= (Minotaur::EnvPtr) new Minotaur::Environment();
	return env;
}

Minotaur::ProblemPtr getProblemPtr()
{
	Minotaur::ProblemPtr oinst;
	return oinst;
}

void setCallbacks (
	minotaur_julia::JuliaInterfacePtr iface, // pointer to julia interface 
	eval_f_cb eval_f,                  // Callback function of objective function 
        eval_g_cb eval_g,                  // Callback function of constraint body 
        eval_grad_f_cb eval_grad_f,                // Callback function of objective gradient 
        eval_jac_g_cb eval_jac_g,          // Callback function of constraint Jacobian 
        eval_h_cb eval_h)                  // Callback function of Lagrangian Hessian 
{
	iface->setCallbacks(eval_f, eval_g, eval_grad_f, eval_jac_g, eval_h);
}
minotaur_julia::JuliaInterfacePtr setJuliaInterface(			/*MPI_Comm comm,*/
			     Minotaur::EnvPtr env,
			     int nvars,
                 	     int ncons,  
			     double *varLB, 
			     double *varUB, 
			     double *consLB, 
		             double *consUB, 
			     int nele_jac, 
			     int nele_hess,
			     int obj_sense,			// Objective sense: maximization ot minimization	
		             bool isobj_nl,			// Is objective nonlinear 
			     int nb_obj)
{			     
	
	minotaur_julia::JuliaInterface* iface = 0;
	//double var_LB;
	//var_LB = new double[nvars];
	for (int i=0; i<nvars; i++){
		printf("%f", varLB[i]);
	}
	iface = new minotaur_julia::JuliaInterface(env, nvars, ncons, varLB, varUB, consLB, consUB, nele_jac, nele_hess, obj_sense, isobj_nl, nb_obj);
	
	return iface;
}

int solveProblem(minotaur_julia::JuliaInterface* iface,
		 double* obj_val, double* x, UserDataPtr)
{
	return 0;
}

void freeProblem()
{
	//if(myJuliaProblem->varLB) delete [] myJuliaProblem->varLB;
	//if(myJuliaProblem->varUB) delete [] myJuliaProblem->varUB;
	//if(myJuliaProblem->consLB) delete [] myJuliaProblem->consLB;
	//if(myJuliaProblem->consUB) delete [] myJuliaProblem->consUB;

	//delete myJuliaProblem;
	//myJuliaProblem=NULL;

}

void loadProblem(Minotaur::EnvPtr env, minotaur_julia::JuliaInterface* iface, 
		 Minotaur::ProblemPtr& oinst) 
{
	oinst = iface->readProblemInstance(); 

}
#ifdef __cplusplus
}
#endif
